{"version":3,"sources":["components/Button.jsx","App.js","reportWebVitals.js","index.js"],"names":["Button","props","state","console","log","id","this","class","onClick","type","className","buttonName","React","Component","App","quote","author","newQuote","bind","getQuote","clickHandler","fetch","then","data","json","quotes","randomQuote","Math","round","random","length","setState","$","animate","opacity","target","href","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"+NAoBeA,E,kDAhBX,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IACDC,MAAQ,GAFE,E,gDAInB,WACIC,QAAQC,IAAI,iB,oBAEhB,WACI,OACI,qBAAKC,GAAIC,KAAKL,MAAMI,GAApB,SACI,wBAAQE,MAAM,SAASC,QAASF,KAAKL,MAAMO,QAASC,KAAK,SAASC,UAAU,0BAA5E,SAAuGJ,KAAKL,MAAMU,mB,GAX7GC,IAAMC,W,wBCmFZC,E,kDAhFX,WAAYb,GAAQ,IAAD,8BACf,cAAMA,IACDC,MAAQ,CACTa,MAAO,GACPC,OAAQ,IAEZ,EAAKC,SAAW,EAAKA,SAASC,KAAd,gBAChB,EAAKC,SAAW,EAAKA,SAASD,KAAd,gBAChB,EAAKE,aAAe,EAAKA,aAAaF,KAAlB,gBARL,E,qDAWnB,WACIZ,KAAKa,a,sBAGT,WAAW,IAAD,OACNE,MAAM,yIACLC,MAAK,SAAAC,GAAI,OAAIA,EAAKC,UAClBF,MAAK,SAAAG,GAEFtB,QAAQC,IAAI,YACZ,IACIsB,EAAcD,EADFE,KAAKC,MAAMD,KAAKE,UAAUJ,EAAOK,OAAO,KAExD,EAAKC,SAAS,CACVhB,MAAOW,EAAYX,MACnBC,OAAQU,EAAYV,c,sBAKhC,WACIV,KAAKa,WACLhB,QAAQC,IAAI,a,0BAGhB,WAAe,IAAD,OAIV4B,IAAE,SAASC,QAAQ,CAACC,QAAS,GAAI,KAAK,WAFlC,EAAKjB,WAILe,IAAE1B,MAAM2B,QAAQ,CAACC,QAAS,GAAI,QAElCF,IAAE,WAAWC,QAAQ,CAACC,QAAS,GAAI,KAAK,WACpCF,IAAE1B,MAAM2B,QAAQ,CAACC,QAAS,GAAI,U,oBAKtC,WACI,MAAwB5B,KAAKJ,MAAtBa,EAAP,EAAOA,MAAOC,EAAd,EAAcA,OAGd,OAFAb,QAAQC,IAAIW,GAGR,sBAAKV,GAAK,YAAV,UACI,qBAAKA,GAAK,OAAV,SACKU,IAEL,sBAAKV,GAAK,SAAV,cACMW,KAEN,sBAAKX,GAAK,SAAV,UACA,cAAC,EAAD,CAAQA,GAAG,cAAcM,WAAc,mBAAGwB,OAAS,SAASC,KAAO,2BAA5B,SAAuD,mBAAG1B,UAAU,uBAK3G,cAAC,EAAD,CAAQL,GAAG,UAAUM,WAAc,mBAAGD,UAAU,wBAGhD,cAAC,EAAD,CAAQL,GAAK,YAAYG,QAAWF,KAAKc,aAAcT,WAAW,wB,GAvEhEC,IAAMC,WCOTwB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBjB,MAAK,YAAkD,IAA/CkB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OAAQ,qBAAKzC,GAAG,YAAR,SACb,cAAC,EAAD,MAGA0C,SAASC,eAAe,SAM5BX,M","file":"static/js/main.9ca5bfe6.chunk.js","sourcesContent":["import React from 'react';\r\n\r\n\r\nclass Button extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {  }\r\n    }\r\n    clickHandler(){\r\n        console.log(\"You clicked\")\r\n    }\r\n    render() { \r\n        return (\r\n            <div id={this.props.id}>\r\n                <button class=\"button\" onClick={this.props.onClick} type=\"button\" className=\"btn btn-outline-primary\">{this.props.buttonName}</button>\r\n            </div>\r\n         );\r\n    }\r\n}\r\n \r\nexport default Button;","import Button from './components/Button';\nimport React from 'react';\nimport \"./style.css\";\nimport $ from 'jquery';\n\nclass App extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            quote: '',\n            author: '' \n        };\n        this.newQuote = this.newQuote.bind(this);\n        this.getQuote = this.getQuote.bind(this);\n        this.clickHandler = this.clickHandler.bind(this);\n    }\n\n    componentDidMount(){\n        this.getQuote();\n    }\n\n    getQuote(){\n        fetch('https://gist.githubusercontent.com/natebass/b0a548425a73bdf8ea5c618149fe1fce/raw/f4231cd5961f026264bb6bb3a6c41671b044f1f4/quotes.json')\n        .then(data => data.json())\n        .then(quotes =>\n        {\n            console.log('rendered');\n            let randIndex = Math.round(Math.random()*(quotes.length-1));\n            let randomQuote = quotes[randIndex];\n            this.setState({\n                quote: randomQuote.quote,\n                author: randomQuote.author\n            })\n        })\n    }\n    \n    newQuote() {\n        this.getQuote();\n        console.log('clicked')\n    }\n\n    clickHandler(){\n        let a = () => {\n            this.newQuote();\n        }\n        $('#text').animate({opacity: 0}, 500, function(){\n            a();\n            $(this).animate({opacity: 1}, 500)\n        })\n        $('#author').animate({opacity: 0}, 500, function(){\n            $(this).animate({opacity: 1}, 500)\n        })\n\n    }\n\n    render() { \n        const {quote, author} = this.state;\n        console.log(quote);\n        \n        return (\n            <div id = \"quote-box\" >\n                <div id = \"text\">\n                    {quote}\n                </div>\n                <div id = \"author\">\n                    -{author}\n                </div>\n                <div id = \"button\">\n                <Button id=\"tweet-quote\" buttonName = {<a target = \"_blank\" href = \"twitter.com/intent/tweet\"><i className=\"fab fa-twitter\"></i></a>\n                    \n}>\n\n                </Button>\n                <Button id=\"fb-post\" buttonName = {<i className=\"fab fa-facebook-f\"></i>\n\n}></Button>\n                <Button id = \"new-quote\" onClick = {this.clickHandler} buttonName=\"New quote\"></Button>\n                </div>\n            </div>\n    \n          );\n          \n    }\n}\n\n \nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App.js'\nimport reportWebVitals from './reportWebVitals';\n\n\nReactDOM.render( <div id=\"container\">\n    <App/>\n\n    </div>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();"],"sourceRoot":""}